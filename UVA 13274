#include<bits/stdc++.h>
using namespace std;
vector<int>vec[1005];
int dist[1005];
bool visit[1005],flag;
int n,k;
int dfs(int src)
{
    visit[src]=true;
    vector<int>temp;
    int cnt=1;
    for(int i=0; i<vec[src].size(); i++)
    {
        int node=vec[src][i];
        if(visit[node]==0)
        {
            temp.push_back(dfs(node));
        }
    }
    if(temp.size()>=k)
    {
        sort(temp.begin(),temp.end());
        int sz=temp.size();
        for(int i=temp.size()-1,p=1;i>=0, p<=k;i--,p++)
            cnt+=temp[i];
    }
    else
        cnt=1;
    return cnt;
}
int main()
{
    int t,u,v;
    cin>>t;
    for(int cs=1;cs<=t;cs++)
    {
        memset(dist,0,sizeof(dist));
        memset(visit,0,sizeof(visit));
        cin>>n>>k;
        for(int i=1; i<n; i++)
        {
            cin>>u>>v;
            vec[u].push_back(v);
            vec[v].push_back(u);
        }
        cout<<"Case "<<cs<<": "<<dfs(1)<<endl;
        for(int i=1;i<=1000;i++)
            vec[i].clear();
    }
}
